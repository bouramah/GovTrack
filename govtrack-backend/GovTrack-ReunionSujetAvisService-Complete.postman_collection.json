{
	"info": {
		"_postman_id": "reunion-sujet-avis-service-complete",
		"name": "GovTrack - ReunionSujetAvisService Complete",
		"description": "Collection complète pour tester le service ReunionSujetAvisService avec toutes les méthodes disponibles",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1. Récupérer tous les avis d'un sujet",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/v1/sujets/{{sujet_test_id}}/avis",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"sujets",
						"{{sujet_test_id}}",
						"avis"
					]
				}
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has success field\", function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"});",
							"",
							"pm.test(\"Success is true\", function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.success).to.be.true;",
							"});",
							"",
							"pm.test(\"Response has data array\", function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.data).to.be.an('array');",
							"});",
							"",
							"// Sauvegarder l'ID du premier avis pour les tests suivants",
							"const response = pm.response.json();",
							"if (response.data && response.data.length > 0) {",
							"    pm.environment.set('avis_test_id', response.data[0].id);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "2. Créer un avis",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"participant_id\": 1,\n    \"type_avis\": \"FAVORABLE\",\n    \"commentaire\": \"Je suis favorable à cette proposition car elle répond aux besoins identifiés.\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/v1/sujets/{{sujet_test_id}}/avis",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"sujets",
						"{{sujet_test_id}}",
						"avis"
					]
				}
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response has success field\", function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"});",
							"",
							"pm.test(\"Success is true\", function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.success).to.be.true;",
							"});",
							"",
							"pm.test(\"Response has data\", function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.data).to.have.property('id');",
							"});",
							"",
							"// Sauvegarder l'ID de l'avis créé",
							"const response = pm.response.json();",
							"if (response.data && response.data.id) {",
							"    pm.environment.set('avis_created_id', response.data.id);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "3. Créer plusieurs avis en lot",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"avis\": [\n        {\n            \"participant_id\": 2,\n            \"type_avis\": \"DEFAVORABLE\",\n            \"commentaire\": \"Je ne suis pas favorable à cette proposition pour les raisons suivantes...\"\n        },\n        {\n            \"participant_id\": 3,\n            \"type_avis\": \"RESERVE\",\n            \"commentaire\": \"J'ai des réserves sur certains aspects de cette proposition.\"\n        },\n        {\n            \"participant_id\": 4,\n            \"type_avis\": \"NEUTRE\",\n            \"commentaire\": \"Je n'ai pas d'avis particulier sur cette proposition.\"\n        }\n    ]\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/v1/sujets/{{sujet_test_id}}/avis/multiple",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"sujets",
						"{{sujet_test_id}}",
						"avis",
						"multiple"
					]
				}
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response has success field\", function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"});",
							"",
							"pm.test(\"Success is true\", function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.success).to.be.true;",
							"});",
							"",
							"pm.test(\"Response has data array\", function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.data).to.be.an('array');",
							"});",
							"",
							"pm.test(\"Multiple avis created\", function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.data.length).to.be.at.least(3);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "4. Récupérer un avis spécifique",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/v1/sujets/{{sujet_test_id}}/avis/{{avis_created_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"sujets",
						"{{sujet_test_id}}",
						"avis",
						"{{avis_created_id}}"
					]
				}
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has success field\", function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"});",
							"",
							"pm.test(\"Success is true\", function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.success).to.be.true;",
							"});",
							"",
							"pm.test(\"Response has data\", function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.data).to.have.property('id');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "5. Mettre à jour un avis",
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"type_avis\": \"RESERVE\",\n    \"commentaire\": \"Après réflexion, j'ai des réserves sur cette proposition. Il faudrait clarifier certains points.\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/v1/sujets/{{sujet_test_id}}/avis/{{avis_created_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"sujets",
						"{{sujet_test_id}}",
						"avis",
						"{{avis_created_id}}"
					]
				}
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has success field\", function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"});",
							"",
							"pm.test(\"Success is true\", function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.success).to.be.true;",
							"});",
							"",
							"pm.test(\"Type avis updated to RESERVE\", function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.data.type_avis).to.equal('RESERVE');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "6. Obtenir les statistiques des avis",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/v1/sujets/{{sujet_test_id}}/avis/stats",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"sujets",
						"{{sujet_test_id}}",
						"avis",
						"stats"
					]
				}
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has success field\", function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"});",
							"",
							"pm.test(\"Success is true\", function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.success).to.be.true;",
							"});",
							"",
							"pm.test(\"Response has stats data\", function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.data).to.have.property('total');",
							"    pm.expect(response.data).to.have.property('favorables');",
							"    pm.expect(response.data).to.have.property('defavorables');",
							"    pm.expect(response.data).to.have.property('reserves');",
							"    pm.expect(response.data).to.have.property('neutres');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "7. Test de validation - Participant ID manquant",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"type_avis\": \"FAVORABLE\",\n    \"commentaire\": \"Avis sans participant_id\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/v1/sujets/{{sujet_test_id}}/avis",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"sujets",
						"{{sujet_test_id}}",
						"avis"
					]
				}
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 422\", function () {",
							"    pm.response.to.have.status(422);",
							"});",
							"",
							"pm.test(\"Response has errors\", function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('errors');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "8. Test de validation - Type d'avis invalide",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"participant_id\": 5,\n    \"type_avis\": \"INVALID_TYPE\",\n    \"commentaire\": \"Avis avec type invalide\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/v1/sujets/{{sujet_test_id}}/avis",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"sujets",
						"{{sujet_test_id}}",
						"avis"
					]
				}
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 422\", function () {",
							"    pm.response.to.have.status(422);",
							"});",
							"",
							"pm.test(\"Response has errors\", function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('errors');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "9. Test de validation - Participant inexistant",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"participant_id\": 999,\n    \"type_avis\": \"FAVORABLE\",\n    \"commentaire\": \"Avis avec participant inexistant\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/v1/sujets/{{sujet_test_id}}/avis",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"sujets",
						"{{sujet_test_id}}",
						"avis"
					]
				}
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 422\", function () {",
							"    pm.response.to.have.status(422);",
							"});",
							"",
							"pm.test(\"Response has errors\", function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('errors');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "10. Supprimer un avis",
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/v1/sujets/{{sujet_test_id}}/avis/{{avis_created_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"sujets",
						"{{sujet_test_id}}",
						"avis",
						"{{avis_created_id}}"
					]
				}
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has success field\", function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"});",
							"",
							"pm.test(\"Success is true\", function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.success).to.be.true;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8000",
			"type": "string"
		},
		{
			"key": "token",
			"value": "",
			"type": "string"
		},
		{
			"key": "sujet_test_id",
			"value": "1",
			"type": "string"
		},
		{
			"key": "avis_test_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "avis_created_id",
			"value": "",
			"type": "string"
		}
	]
}
