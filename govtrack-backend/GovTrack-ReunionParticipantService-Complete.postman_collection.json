{
	"info": {
		"_postman_id": "reunion-participant-service-complete",
		"name": "GovTrack - ReunionParticipantService Complete",
		"description": "Collection complète pour tester le service ReunionParticipantService avec toutes les méthodes disponibles",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1. Lister les participants d'une réunion",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/v1/reunions/{{reunion_test_id}}/participants",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"reunions",
						"{{reunion_test_id}}",
						"participants"
					]
				}
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has success field\", function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"});",
							"",
							"pm.test(\"Success is true\", function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.success).to.be.true;",
							"});",
							"",
							"pm.test(\"Response has data array\", function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.data).to.be.an('array');",
							"});",
							"",
							"// Sauvegarder l'ID du premier participant pour les tests suivants",
							"const response = pm.response.json();",
							"if (response.data && response.data.length > 0) {",
							"    pm.environment.set('participant_test_id', response.data[0].id);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "2. Ajouter un participant",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"user_id\": 2,\n    \"role\": \"PARTICIPANT\",\n    \"type\": \"INVITE\",\n    \"statut_presence\": \"EN_ATTENTE\",\n    \"notifications_actives\": {\n        \"CONFIRMATION_PRESENCE\": true,\n        \"RAPPEL_24H\": true,\n        \"RAPPEL_1H\": false\n    }\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/v1/reunions/{{reunion_test_id}}/participants",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"reunions",
						"{{reunion_test_id}}",
						"participants"
					]
				}
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response has success field\", function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"});",
							"",
							"pm.test(\"Success is true\", function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.success).to.be.true;",
							"});",
							"",
							"pm.test(\"Response has data\", function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.data).to.have.property('id');",
							"});",
							"",
							"// Sauvegarder l'ID du participant créé",
							"const response = pm.response.json();",
							"if (response.data && response.data.id) {",
							"    pm.environment.set('participant_created_id', response.data.id);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "3. Ajouter plusieurs participants",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"participants\": [\n        {\n            \"user_id\": 3,\n            \"role\": \"SECRETAIRE\",\n            \"type\": \"PERMANENT\",\n            \"statut_presence\": \"CONFIRME\",\n            \"notifications_actives\": {\n                \"CONFIRMATION_PRESENCE\": true,\n                \"RAPPEL_24H\": true,\n                \"RAPPEL_1H\": true\n            }\n        },\n        {\n            \"user_id\": 4,\n            \"role\": \"OBSERVATEUR\",\n            \"type\": \"INVITE\",\n            \"statut_presence\": \"EN_ATTENTE\",\n            \"notifications_actives\": {\n                \"CONFIRMATION_PRESENCE\": false,\n                \"RAPPEL_24H\": true\n            }\n        }\n    ]\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/v1/reunions/{{reunion_test_id}}/participants/multiple",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"reunions",
						"{{reunion_test_id}}",
						"participants",
						"multiple"
					]
				}
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response has success field\", function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"});",
							"",
							"pm.test(\"Success is true\", function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.success).to.be.true;",
							"});",
							"",
							"pm.test(\"Response has data array\", function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.data).to.be.an('array');",
							"});",
							"",
							"pm.test(\"Multiple participants created\", function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.data.length).to.be.at.least(2);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "4. Mettre à jour un participant",
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"role\": \"PRESIDENT\",\n    \"type\": \"PERMANENT\",\n    \"statut_presence\": \"CONFIRME\",\n    \"notifications_actives\": {\n        \"CONFIRMATION_PRESENCE\": true,\n        \"RAPPEL_24H\": true,\n        \"RAPPEL_1H\": true,\n        \"RAPPEL_15MIN\": true\n    }\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/v1/reunions/{{reunion_test_id}}/participants/{{participant_created_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"reunions",
						"{{reunion_test_id}}",
						"participants",
						"{{participant_created_id}}"
					]
				}
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has success field\", function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"});",
							"",
							"pm.test(\"Success is true\", function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.success).to.be.true;",
							"});",
							"",
							"pm.test(\"Role updated to PRESIDENT\", function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.data.role).to.equal('PRESIDENT');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "5. Mettre à jour le statut de présence",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"statut\": \"ABSENT\",\n    \"commentaire_absence\": \"Participant indisponible pour cette réunion\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/v1/reunions/{{reunion_test_id}}/participants/{{participant_created_id}}/presence",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"reunions",
						"{{reunion_test_id}}",
						"participants",
						"{{participant_created_id}}",
						"presence"
					]
				}
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has success field\", function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"});",
							"",
							"pm.test(\"Success is true\", function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.success).to.be.true;",
							"});",
							"",
							"pm.test(\"Status updated to ABSENT\", function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.data.statut_presence).to.equal('ABSENT');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "6. Obtenir les statistiques des participants",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/v1/reunions/{{reunion_test_id}}/participants/stats",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"reunions",
						"{{reunion_test_id}}",
						"participants",
						"stats"
					]
				}
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has success field\", function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"});",
							"",
							"pm.test(\"Success is true\", function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.success).to.be.true;",
							"});",
							"",
							"pm.test(\"Response has stats data\", function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.data).to.have.property('total');",
							"    pm.expect(response.data).to.have.property('confirmes');",
							"    pm.expect(response.data).to.have.property('absents');",
							"    pm.expect(response.data).to.have.property('en_attente');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "7. Test de validation - User ID manquant",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"role\": \"PARTICIPANT\",\n    \"type\": \"INVITE\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/v1/reunions/{{reunion_test_id}}/participants",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"reunions",
						"{{reunion_test_id}}",
						"participants"
					]
				}
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 422\", function () {",
							"    pm.response.to.have.status(422);",
							"});",
							"",
							"pm.test(\"Response has errors\", function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('errors');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "8. Test de validation - Rôle invalide",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"user_id\": 5,\n    \"role\": \"INVALID_ROLE\",\n    \"type\": \"INVITE\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/v1/reunions/{{reunion_test_id}}/participants",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"reunions",
						"{{reunion_test_id}}",
						"participants"
					]
				}
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 422\", function () {",
							"    pm.response.to.have.status(422);",
							"});",
							"",
							"pm.test(\"Response has errors\", function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('errors');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "9. Test de validation - Statut de présence invalide",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"user_id\": 6,\n    \"role\": \"PARTICIPANT\",\n    \"type\": \"INVITE\",\n    \"statut_presence\": \"INVALID_STATUS\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/v1/reunions/{{reunion_test_id}}/participants",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"reunions",
						"{{reunion_test_id}}",
						"participants"
					]
				}
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 422\", function () {",
							"    pm.response.to.have.status(422);",
							"});",
							"",
							"pm.test(\"Response has errors\", function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('errors');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "10. Supprimer un participant",
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/v1/reunions/{{reunion_test_id}}/participants/{{participant_created_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"reunions",
						"{{reunion_test_id}}",
						"participants",
						"{{participant_created_id}}"
					]
				}
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has success field\", function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"});",
							"",
							"pm.test(\"Success is true\", function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.success).to.be.true;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8000",
			"type": "string"
		},
		{
			"key": "token",
			"value": "",
			"type": "string"
		},
		{
			"key": "reunion_test_id",
			"value": "1",
			"type": "string"
		},
		{
			"key": "participant_test_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "participant_created_id",
			"value": "",
			"type": "string"
		}
	]
}
